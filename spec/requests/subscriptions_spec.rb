 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/subscriptions", type: :request do
  
  # Subscription. As you add validations to Subscription, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /new" do
    it "renders a successful response" do
      get new_subscription_url
      expect(response).to be_successful
    end
  end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested subscription" do
  #       subscription = Subscription.create! valid_attributes
  #       patch subscription_url(subscription), params: { subscription: new_attributes }
  #       subscription.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "redirects to the subscription" do
  #       subscription = Subscription.create! valid_attributes
  #       patch subscription_url(subscription), params: { subscription: new_attributes }
  #       subscription.reload
  #       expect(response).to redirect_to(subscription_url(subscription))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a successful response (i.e. to display the 'edit' template)" do
  #       subscription = Subscription.create! valid_attributes
  #       patch subscription_url(subscription), params: { subscription: invalid_attributes }
  #       expect(response).to be_successful
  #     end
  #   end
  # end
end
